{
  "Description": "AWS CloudFormation template that describes all the required resources for setting up clevertap's stack. Supported zones are listed in the Mappings section. Certificates and base AMI id are prerequisites",
  "Parameters": {
    "VCPNetworkPrefix": {
      "Description": "Just the first two octets - .0.0/16 will be appended automatically",
      "Default": "10.0",
      "Type": "String"
    },
    "SshKey": {
      "Description": "Amazon EC2 Key Pair",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "RemoteWhitelistIp": {
      "Description": "IP address to whitelist. Will be able to access services exposed on instances mapped with an elastic public IP. Must be in CIDR format",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "19"
    },
    "MinRemoteLogProcessorInstances": {
      "Default": "0",
      "Type": "Number",
      "MinValue": "0",
      "MaxValue": "65535"
    },
    "DesiredRemoteLogProcessorInstances": {
      "Default": "0",
      "Type": "Number",
      "MinValue": "0",
      "MaxValue": "65535"
    },
    "MaxRemoteLogProcessorInstances": {
      "Default": "0",
      "Type": "Number",
      "MinValue": "0",
      "MaxValue": "65535"
    },
    "WizRocketDotNetPublicHostedZoneId": {
      "Description": "Public hosted zone ID of wizrocket.net",
      "Default": "",
      "Type": "String"
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Network configuration"
          },
          "Parameters": [
            "VCPNetworkPrefix",
            "SshKey",
            "RemoteWhitelistIp"
          ]
        },
        {
          "Label": {
            "default": "RemoteLogProcessor autoscaling configuration"
          },
          "Parameters": [
            "MinRemoteLogProcessorInstances",
            "DesiredRemoteLogProcessorInstances",
            "MaxRemoteLogProcessorInstances"
          ]
        }
      ],
      "ParameterLabels": {
        "VCPNetworkPrefix": {
          "default": "VPC network prefix for this stack"
        },
        "SshKey": {
          "default": "Default SSH key to associate with instances"
        },
        "RemoteWhitelistIp": {
          "default": "Remote whitelisted ip address"
        },
        "MinRemoteLogProcessorInstances": {
          "default": "Minimum # of instances"
        },
        "DesiredRemoteLogProcessorInstances": {
          "default": "Desired # of instances"
        },
        "MaxRemoteLogProcessorInstances": {
          "default": "Maximum # of instances"
        }
      }
    }
  },
  "Mappings": {
    "RegionToCodeDeployAgentBucketMap": {
      "us-east-2": {
        "production": "aws-codedeploy-us-east-2"
      },
      "us-east-1": {
        "production": "aws-codedeploy-us-east-1"
      },
      "us-west-1": {
        "production": "aws-codedeploy-us-west-1"
      },
      "us-west-2": {
        "production": "aws-codedeploy-us-west-2"
      },
      "ca-central-1": {
        "production": "aws-codedeploy-ca-central-1"
      },
      "eu-west-1": {
        "production": "aws-codedeploy-eu-west-1"
      },
      "eu-west-2": {
        "production": "aws-codedeploy-eu-west-2"
      },
      "eu-central-1": {
        "production": "aws-codedeploy-eu-central-1"
      },
      "ap-northeast-1": {
        "production": "aws-codedeploy-ap-northeast-1"
      },
      "ap-northeast-2": {
        "production": "aws-codedeploy-ap-northeast-2"
      },
      "ap-southeast-1": {
        "production": "aws-codedeploy-ap-southeast-1"
      },
      "ap-southeast-2": {
        "production": "aws-codedeploy-ap-southeast-2"
      },
      "ap-south-1": {
        "production": "aws-codedeploy-ap-south-1"
      },
      "sa-east-1": {
        "production": "aws-codedeploy-sa-east-1"
      }
    },
    "RegionToAirportAmiMap": {
      "ap-south-1": {
        "production": "ami-82a3d7ed"
      },
      "eu-west-1": {
        "production": "ami-70edb016"
      }
    },
    "RegionToRedisAmiMap": {
      "ap-south-1": {
        "production": "ami-814e39ee"
      },
      "eu-west-1": {
        "production": "ami-70edb016"
      }
    },
    "RegionToRemoteLogProcessorAmiMap": {
      "ap-south-1": {
        "production": "ami-814e39ee"
      },
      "eu-west-1": {
        "production": "ami-70edb016"
      }
    },
    "RegionToEventStoreAmiMap": {
      "ap-south-1": {
        "production": "ami-cb9de9a4"
      },
      "eu-west-1": {
        "production": "ami-70edb016"
      }
    }
  },
  "Resources": {
    "CodeDeployS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              {
                "Ref": "AWS::Region"
              },
              "codedeploy"
            ]
          ]
        }
      }
    },
    "CodeDeployTrustIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  {
                    "Fn::Join": [
                      ".",
                      [
                        "codedeploy",
                        {
                          "Ref": "AWS::Region"
                        },
                        "amazonaws.com"
                      ]
                    ]
                  }
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "CT",
              "CodeDeployTrustIamRole",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        }
      }
    },
    "CodeDeployIamPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              "CT",
              "CodeDeployPolicy",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "autoscaling:CompleteLifecycleAction",
                "autoscaling:DeleteLifecycleHook",
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeLifecycleHooks",
                "autoscaling:PutLifecycleHook",
                "autoscaling:RecordLifecycleActionHeartbeat",
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceStatus",
                "tag:GetTags",
                "tag:GetResources",
                "sns:Publish",
                "cloudwatch:DescribeAlarms"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CodeDeployTrustIamRole"
          }
        ]
      }
    },
    "CodeDeployInstanceIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "CT",
              "CodeDeployInstanceIamRole",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        }
      }
    },
    "CodeDeployInstanceIamPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              "CT",
              "CodeDeployInstanceIamPolicy",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "autoscaling:Describe*",
                "cloudformation:Describe*",
                "cloudformation:GetTemplate",
                "s3:Get*",
                "s3:List*"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "CodeDeployS3Bucket"
                    },
                    "/*"
                  ]
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CodeDeployInstanceIamRole"
          }
        ]
      }
    },
    "CodeDeployInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "CodeDeployInstanceIamRole"
          }
        ]
      }
    },
    "CdAndEcrInstanceIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "CT",
              "CdAndEcrInstanceIamRole",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        }
      }
    },
    "CdAndEcrInstanceIamPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              "CT",
              "CdAndEcrInstanceIamPolicy",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "autoscaling:Describe*",
                "cloudformation:Describe*",
                "cloudformation:GetTemplate",
                "s3:Get*",
                "s3:List*"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "CodeDeployS3Bucket"
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:GetRepositoryPolicy",
                "ecr:DescribeRepositories",
                "ecr:ListImages",
                "ecr:BatchGetImage"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CdAndEcrInstanceIamRole"
          }
        ]
      }
    },
    "CdAndEcrInstanceIamProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "CdAndEcrInstanceIamRole"
          }
        ]
      }
    },
    "NotificationEstimateFilesIamUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "UserName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::StackName"
              },
              "notification-estimate-files"
            ]
          ]
        }
      }
    },
    "NotificationEstimateFilesS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::StackName"
              },
              "notification-estimate-files"
            ]
          ]
        }
      }
    },
    "NotificationEstimateFilesIamPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "NotificationEstimateFilesS3Bucket"
                    },
                    "/*"
                  ]
                ]
              }
            }
          ]
        },
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::StackName"
              },
              "notification-estimate-files-s3-bucket"
            ]
          ]
        },
        "Users": [
          {
            "Ref": "NotificationEstimateFilesIamUser"
          }
        ]
      }
    },
    "StaticAssetsS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              {
                "Ref": "AWS::Region"
              },
              "static-assets"
            ]
          ]
        }
      }
    },
    "StaticAssetsIamUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "UserName": {
          "Fn::Join": [
            "-",
            [
              "static-assets",
              {
                "Ref": "AWS::StackName"
              },
              {
                "Ref": "AWS::Region"
              }
            ]
          ]
        }
      }
    },
    "StaticAssetsIamPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "s3:*",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "StaticAssetsS3Bucket"
                    },
                    "/*"
                  ]
                ]
              }
            }
          ]
        },
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              "CT",
              "StaticAssets",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        },
        "Users": [
          {
            "Ref": "StaticAssetsIamUser"
          }
        ]
      }
    },
    "DataBackupS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              {
                "Ref": "AWS::Region"
              },
              "data-backup"
            ]
          ]
        }
      }
    },
    "DataBackupIamUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "UserName": {
          "Fn::Join": [
            "-",
            [
              "data-backup",
              {
                "Ref": "AWS::StackName"
              },
              {
                "Ref": "AWS::Region"
              }
            ]
          ]
        }
      }
    },
    "DataBackupIamPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "s3:*",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "DataBackupS3Bucket"
                    },
                    "/*"
                  ]
                ]
              }
            }
          ]
        },
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              "CT",
              "DataBackup",
              {
                "Ref": "AWS::Region"
              },
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        },
        "Users": [
          {
            "Ref": "DataBackupIamUser"
          }
        ]
      }
    },
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "VCPNetworkPrefix"
              },
              "0.0/16"
            ]
          ]
        },
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "InstanceTenancy": "default"
      }
    },
    "ReserveEip0": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "ReserveEip1": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
      }
    },
    "VpcGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "RouteTableNat": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "RouteTableIgw": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "NatGatewayEip": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NetworkingSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::Region"
              },
              "a"
            ]
          ]
        },
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "VCPNetworkPrefix"
              },
              "1.0/24"
            ]
          ]
        },
        "MapPublicIpOnLaunch": false,
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "NatGateway": {
      "Type": "AWS::EC2::NatGateway",
      "DependsOn": [
        "NatGatewayEip",
        "InternetGateway"
      ],
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "NatGatewayEip",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "NetworkingSubnet"
        }
      }
    },
    "NatGatewayEip1b": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NetworkingSubnet1b": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::Region"
              },
              "b"
            ]
          ]
        },
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "VCPNetworkPrefix"
              },
              "2.0/24"
            ]
          ]
        },
        "MapPublicIpOnLaunch": false,
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "NatGateway1b": {
      "Type": "AWS::EC2::NatGateway",
      "DependsOn": [
        "NatGatewayEip1b",
        "InternetGateway"
      ],
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "NatGatewayEip1b",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "NetworkingSubnet1b"
        }
      }
    },
    "RouteTableNatRouteWorld": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTableNat"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NatGateway"
        }
      }
    },
    "RouteTableIgwRouteWorld": {
      "Type": "AWS::EC2::Route",
      "DependsOn": [
        "InternetGateway",
        "VpcGatewayAttachment"
      ],
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTableIgw"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "NetworkingSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTableIgw"
        },
        "SubnetId": {
          "Ref": "NetworkingSubnet"
        }
      }
    },
    "AirportEpi": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "AirportSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "airport security group",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "RemoteWhitelistIp"
            }
          }
        ]
      }
    },
    "AirportInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "CodeDeployAgent": [
              "SystemUpdate",
              "SetupCodeDeployAgent"
            ]
          },
          "SystemUpdate": {
            "commands": {
              "01_update_yum_packages": {
                "command": "yum update -y"
              }
            }
          },
          "SetupCodeDeployAgent": {
            "packages": {
              "yum": {
                "ruby": []
              }
            },
            "files": {
              "/home/ec2-user/codedeploy-agent.noarch.rpm": {
                "source": "https://s3.amazonaws.com/aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm"
              }
            },
            "commands": {
              "01_install_codedeploy_agent": {
                "command": "yum -y install /home/ec2-user/codedeploy-agent.noarch.rpm"
              }
            },
            "services": {
              "sysvinit": {
                "codedeploy-agent": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            }
          }
        }
      },
      "Properties": {
        "DisableApiTermination": true,
        "ImageId": {
          "Fn::FindInMap": [
            "RegionToAirportAmiMap",
            {
              "Ref": "AWS::Region"
            },
            "production"
          ]
        },
        "InstanceInitiatedShutdownBehavior": "stop",
        "InstanceType": "t2.nano",
        "KeyName": {
          "Ref": "SshKey"
        },
        "IamInstanceProfile": {
          "Ref": "CdAndEcrInstanceIamProfile"
        },
        "Monitoring": true,
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "AirportSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "SubnetId": {
          "Ref": "NetworkingSubnet"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "echo 'airport' > /etc/node_profile\n",
                "/opt/aws/bin/cfn-init -v ",
                "  --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "  --resource AirportInstance ",
                "  --configsets CodeDeployAgent  ",
                "  --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "AirportEpiAccociation": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "AirportEpi",
            "AllocationId"
          ]
        },
        "InstanceId": {
          "Ref": "AirportInstance"
        }
      }
    },
    "LoadBalancerSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::Region"
              },
              "a"
            ]
          ]
        },
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "VCPNetworkPrefix"
              },
              "16.0/20"
            ]
          ]
        },
        "MapPublicIpOnLaunch": false,
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "LoadBalancerSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTableIgw"
        },
        "SubnetId": {
          "Ref": "LoadBalancerSubnet"
        }
      }
    },
    "LoadBalancerSubnet1b": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::Region"
              },
              "b"
            ]
          ]
        },
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "VCPNetworkPrefix"
              },
              "128.0/20"
            ]
          ]
        },
        "MapPublicIpOnLaunch": false,
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "LoadBalancerSubnet1bRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTableIgw"
        },
        "SubnetId": {
          "Ref": "LoadBalancerSubnet1b"
        }
      }
    },
    "LogCollectorv2LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "log collector v2 load balancer security group",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "LogCollectorv2InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "log collector v2 security group",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupId": {
              "Ref": "LogCollectorv2LoadBalancerSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupId": {
              "Ref": "AirportSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "AirportSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "2222",
            "ToPort": "2222",
            "SourceSecurityGroupId": {
              "Ref": "AirportSecurityGroup"
            }
          }
        ]
      }
    },
    "ApiLogCollectorv2LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "api log collector load balancer security group",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "ApiLogCollectorv2InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "log collector api security group",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupId": {
              "Ref": "ApiLogCollectorv2LoadBalancerSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupId": {
              "Ref": "AirportSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "AirportSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "2222",
            "ToPort": "2222",
            "SourceSecurityGroupId": {
              "Ref": "AirportSecurityGroup"
            }
          }
        ]
      }
    },
  },
  "Outputs": {
    "SshKey": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-SshKey"
        }
      },
      "Value": {
        "Ref": "SshKey"
      }
    },
    "CodeDeployS3Bucket": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-CodeDeployS3Bucket"
        }
      },
      "Value": {
        "Ref": "CodeDeployS3Bucket"
      }
    },
    "RegionToCodeDeployAgentBucketMap": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-RegionToCodeDeployAgentBucketMap"
        }
      },
      "Value": {
        "Fn::FindInMap": [
          "RegionToCodeDeployAgentBucketMap",
          {
            "Ref": "AWS::Region"
          },
          "production"
        ]
      }
    },
    "CdAndEcrInstanceIamProfile": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-CdAndEcrInstanceIamProfile"
        }
      },
      "Value": {
        "Ref": "CdAndEcrInstanceIamProfile"
      }
    },
    "CodeDeployTrustIamRole": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-CodeDeployTrustIamRole"
        }
      },
      "Value": {
        "Ref": "CodeDeployTrustIamRole"
      }
    },
    "CodeDeployTrustIamRoleArn": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-CodeDeployTrustIamRoleArn"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "CodeDeployTrustIamRole",
          "Arn"
        ]
      }
    },
    "VCPNetworkPrefix": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-VCPNetworkPrefix"
        }
      },
      "Value": {
        "Ref": "VCPNetworkPrefix"
      }
    },
    "VpcNetworkPrefix": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-VpcNetworkPrefix"
        }
      },
      "Value": {
        "Ref": "VCPNetworkPrefix"
      }
    },
    "VpcId": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-VpcId"
        }
      },
      "Value": {
        "Ref": "Vpc"
      }
    },
    "ReserveEip0PublicIp": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ReserveEip0PublicIp"
        }
      },
      "Value": {
        "Ref": "ReserveEip0"
      }
    },
    "ReserveEip1PublicIp": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ReserveEip1PublicIp"
        }
      },
      "Value": {
        "Ref": "ReserveEip1"
      }
    },
    "NatGatewayEipPublicIp": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-NatGatewayEipPublicIp"
        }
      },
      "Value": {
        "Ref": "NatGatewayEip"
      }
    },
    "RouteTableNatId": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-RouteTableNatId"
        }
      },
      "Value": {
        "Ref": "RouteTableNat"
      }
    },
    "RouteTableIgwId": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-RouteTableIgwId"
        }
      },
      "Value": {
        "Ref": "RouteTableIgw"
      }
    },
    "AirportSecurityGroupId": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-AirportSecurityGroupId"
        }
      },
      "Value": {
        "Ref": "AirportSecurityGroup"
      }
    },
    "LogCollectorv2LoadBalancerSecurityGroupId": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-LogCollectorv2LoadBalancerSecurityGroupId"
        }
      },
      "Value": {
        "Ref": "LogCollectorv2LoadBalancerSecurityGroup"
      }
    },
    "LogCollectorv2InstanceSecurityGroupId": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-LogCollectorv2InstanceSecurityGroupId"
        }
      },
      "Value": {
        "Ref": "LogCollectorv2InstanceSecurityGroup"
      }
    },
    "ApiLogCollectorv2LoadBalancerSecurityGroupId": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ApiLogCollectorv2LoadBalancerSecurityGroupId"
        }
      },
      "Value": {
        "Ref": "ApiLogCollectorv2LoadBalancerSecurityGroup"
      }
    },
    "ApiLogCollectorv2InstanceSecurityGroupId": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ApiLogCollectorv2InstanceSecurityGroupId"
        }
      },
      "Value": {
        "Ref": "ApiLogCollectorv2InstanceSecurityGroup"
      }
    },
    "LoadBalancerSubnetId": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-LoadBalancerSubnetId"
        }
      },
      "Value": {
        "Ref": "LoadBalancerSubnet"
      }
    },
    "LoadBalancerSubnet1bId": {
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-LoadBalancerSubnet1bId"
        }
      },
      "Value": {
        "Ref": "LoadBalancerSubnet1b"
      }
    },
  }
}